<?xml version="1.0" encoding="utf-8"?>
<Analyzers>
  <Analyzer Identifier="UsePatternMatching">
    <Id>RCS9001</Id>
    <Title>Use pattern matching.</Title>
    <MessageFormat>Use pattern matching.</MessageFormat>
    <Category>Usage</Category>
    <DefaultSeverity>Hidden</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[if (syntaxNode.IsKind(SyntaxKind.IdentifierName)) // [|Id|]
{
    var identifierName = (IdentifierNameSyntax)syntaxNode;
}]]></Before>
        <After><![CDATA[if (syntaxNode is IdentifierNameSyntax identifierName)
{
}]]></After>
      </Sample>
      <Sample>
        <Before><![CDATA[if (!syntaxNode.IsKind(SyntaxKind.IdentifierName)) // [|Id|]
{
    return;
}

var identifierName = (IdentifierNameSyntax)syntaxNode;
]]></Before>
        <After><![CDATA[if (!(syntaxNode is IdentifierNameSyntax identifierName))
{
  return;
}]]></After>
      </Sample>
    </Samples>
  </Analyzer>
  <Analyzer Identifier="UsePropertySyntaxNodeSpanStart">
    <Id>RCS9002</Id>
    <Title>Use property SyntaxNode.SpanStart.</Title>
    <MessageFormat>Use property SyntaxNode.SpanStart.</MessageFormat>
    <Category>Performance</Category>
    <DefaultSeverity>Info</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[node.Span.Start // [|Id|]]]></Before>
        <After><![CDATA[node.SpanStart]]></After>
      </Sample>
    </Samples>
  </Analyzer>
  <Analyzer Identifier="UnnecessaryConditionalAccess">
    <Id>RCS9003</Id>
    <Title>Unnecessary conditional access.</Title>
    <MessageFormat>Unnecessary conditional access.</MessageFormat>
    <Category>Performance</Category>
    <DefaultSeverity>Info</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>true</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>true</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[node?.IsKind(kind) == true // [|Id|]]]></Before>
        <After><![CDATA[node.IsKind(kind)]]></After>
      </Sample>
    </Samples>
  </Analyzer>
  <Analyzer Identifier="CallAnyInsteadOfAccessingCount">
    <Id>RCS9004</Id>
    <Title>Call 'Any' instead of accessing 'Count'.</Title>
    <MessageFormat>Call 'Any' instead of accessing 'Count'.</MessageFormat>
    <Category>Performance</Category>
    <DefaultSeverity>Info</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[syntaxList.Count > 0 // [|Id|]]]></Before>
        <After><![CDATA[syntaxList.Any()]]></After>
      </Sample>
      <Sample>
        <Before><![CDATA[syntaxList.Count == 0 // [|Id|]]]></Before>
        <After><![CDATA[!syntaxList.Any()]]></After>
      </Sample>
    </Samples>
    <Remarks>This analyzer is applicable for following types:
* `Microsoft.CodeAnalysis.ChildSyntaxList`
* `Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;`
* `Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;`
* `Microsoft.CodeAnalysis.SyntaxNodeOrTokenList`
* `Microsoft.CodeAnalysis.SyntaxTokenList`
* `Microsoft.CodeAnalysis.SyntaxTriviaList`</Remarks>
  </Analyzer>
  <Analyzer Identifier="UnnecessaryNullCheck">
    <Id>RCS9005</Id>
    <Title>Unnecessary null check.</Title>
    <MessageFormat>Unnecessary null check.</MessageFormat>
    <Category>Performance</Category>
    <DefaultSeverity>Info</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>true</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[syntaxNode != null && syntaxNode.IsKind(kind) // [|Id|]]]></Before>
        <After><![CDATA[syntaxNode.IsKind(kind)]]></After>
      </Sample>
    </Samples>
  </Analyzer>
  <Analyzer Identifier="UseElementAccess">
    <Id>RCS9006</Id>
    <Title>Use element access.</Title>
    <MessageFormat>Use element access.</MessageFormat>
    <Category>Usage</Category>
    <DefaultSeverity>Info</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[syntaxList.First() // [|Id|]]]></Before>
        <After><![CDATA[syntaxList[0]]]></After>
      </Sample>
      <Sample>
        <Before><![CDATA[triviaList.ElementAt(1) // [|Id|]]]></Before>
        <After><![CDATA[triviaList[1]]]></After>
      </Sample>
    </Samples>
    <Remarks>This analyzer is applicable for following types:
* `Microsoft.CodeAnalysis.ChildSyntaxList`
* `Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;`
* `Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;`
* `Microsoft.CodeAnalysis.SyntaxNodeOrTokenList`
* `Microsoft.CodeAnalysis.SyntaxTokenList`
* `Microsoft.CodeAnalysis.SyntaxTriviaList`</Remarks>
  </Analyzer>
  <Analyzer Identifier="UseReturnValue">
    <Id>RCS9007</Id>
    <Title>Use return value.</Title>
    <MessageFormat>Use return value.</MessageFormat>
    <Category>Usage</Category>
    <DefaultSeverity>Warning</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[ifStatement.WithCondition(newCondition); // [|Id|]]]></Before>
        <After><![CDATA[var x = ifStatement.WithCondition(newCondition);]]></After>
      </Sample>
    </Samples>
  </Analyzer>
  <Analyzer Identifier="CallLastInsteadOfUsingElementAccess">
    <Id>RCS9008</Id>
    <Title>Call 'Last' instead of using [].</Title>
    <MessageFormat>Call 'Last' instead of using [].</MessageFormat>
    <Category>Usage</Category>
    <DefaultSeverity>Info</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[syntaxList[syntaxList.Count - 1] // [|Id|]]]></Before>
        <After><![CDATA[!syntaxList.Last()]]></After>
      </Sample>
    </Samples>
    <Remarks>This analyzer is applicable for following types:
* `Microsoft.CodeAnalysis.ChildSyntaxList`
* `Microsoft.CodeAnalysis.SeparatedSyntaxList&lt;TNode&gt;`
* `Microsoft.CodeAnalysis.SyntaxList&lt;TNode&gt;`
* `Microsoft.CodeAnalysis.SyntaxNodeOrTokenList`
* `Microsoft.CodeAnalysis.SyntaxTokenList`
* `Microsoft.CodeAnalysis.SyntaxTriviaList`</Remarks>
  </Analyzer>
  <Analyzer Identifier="UnknownLanguageName">
    <Id>RCS9009</Id>
    <Title>Unknown language name.</Title>
    <MessageFormat>Unknown language name.</MessageFormat>
    <Category>General</Category>
    <DefaultSeverity>Warning</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[[DiagnosticAnalyzer("C")] // [|Id|]
class FooDiagnosticAnalyzer : DiagnosticAnalyzer
{
}]]></Before>
        <After><![CDATA[[DiagnosticAnalyzer("C#")]
class FooDiagnosticAnalyzer : DiagnosticAnalyzer
{
}]]></After>
      </Sample>
    </Samples>
  </Analyzer>
  <Analyzer Identifier="SpecifyExportCodeRefactoringProviderAttributeName">
    <Id>RCS9010</Id>
    <Title>Specify ExportCodeRefactoringProviderAttribute.Name.</Title>
    <MessageFormat>Specify ExportCodeRefactoringProviderAttribute.Name.</MessageFormat>
    <Category>Usage</Category>
    <DefaultSeverity>Hidden</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[[ExportCodeRefactoringProvider(LanguageNames.CSharp)] // [|Id|]
class FooCodeRefactoringProvider : CodeRefactoringProvider
{
}]]></Before>
        <After><![CDATA[[ExportCodeRefactoringProvider(LanguageNames.CSharp, Name = nameof(FooCodeRefactoringProvider))]
class FooCodeRefactoringProvider : CodeRefactoringProvider
{
}]]></After>
      </Sample>
    </Samples>
  </Analyzer>
  <Analyzer Identifier="SpecifyExportCodeFixProviderAttributeName">
    <Id>RCS9011</Id>
    <Title>Specify ExportCodeFixProviderAttribute.Name.</Title>
    <MessageFormat>Specify ExportCodeFixProviderAttribute.Name.</MessageFormat>
    <Category>Usage</Category>
    <DefaultSeverity>Hidden</DefaultSeverity>
    <IsEnabledByDefault>true</IsEnabledByDefault>
    <SupportsFadeOut>false</SupportsFadeOut>
    <SupportsFadeOutAnalyzer>false</SupportsFadeOutAnalyzer>
    <Samples>
      <Sample>
        <Before><![CDATA[[ExportCodeFixProvider(LanguageNames.CSharp)] // [|Id|]
class FooCodeFixProvider : CodeFixProvider
{
}]]></Before>
        <After><![CDATA[[ExportCodeFixProvider(LanguageNames.CSharp, Name = nameof(FooCodeFixProvider))]
class FooCodeFixProvider : CodeFixProvider
{
}]]></After>
      </Sample>
    </Samples>
  </Analyzer>
</Analyzers>